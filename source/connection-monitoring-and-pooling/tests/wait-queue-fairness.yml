version: 1
style: unit
description: must issue Connections to threads in the order that the threads eneterd the queue
poolOptions:
  maxPoolSize: 1
operations:
    # Acquire sole connection in pool
  - name: acquire
    label: conn0
    # Create 4 threads, have them all queue up for connections
  - name: start
    target: thread1
  - name: acquire
    thread: thread1
    label: conn1
  - name: start
    target: thread2
  - name: acquire
    thread: thread2
    label: conn2
  - name: start
    target: thread3
  - name: acquire
    thread: thread3
    label: conn3
  - name: start
    target: thread4
  - name: acquire
    thread: thread4
    label: conn4
    # From main thread, keep releasing connection and then wait for appropriate thread
    # Test will timeout if threads are not enqueued in proper order
  - name: release
    connection: conn0
  - name: waitFor
    target: thread1
  - name: release
    connection: conn1
  - name: waitFor
    target: thread2
  - name: release
    connection: conn2
  - name: waitFor
    target: thread3
  - name: release
    connection: conn3
  - name: waitFor
    target: thread4
events:
  - type: connectionAcquisitionStarted
  - type: connectionAcquired
  - type: connectionAcquisitionStarted
  - type: connectionAcquisitionStarted
  - type: connectionAcquisitionStarted
  - type: connectionAcquisitionStarted
  - type: connectionReleased
  - type: connectionAcquired
  - type: connectionReleased
  - type: connectionAcquired
  - type: connectionReleased
  - type: connectionAcquired
  - type: connectionReleased
  - type: connectionAcquired
ignore:
  - connectionCreated
  - connectionClosed
  - connectionPoolCreated