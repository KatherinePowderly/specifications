version: 1
style: unit
tests:
  - description: must be able to acquire a connection
    operations:
      - command: createPool
        returnTo: pool
      - command: acquire
        object: pool
    events:
      - type: connectionPoolQueueEntered
        pool:
          id: {$$ref: ['pool', 'id']}
      - type: connectionPoolAcquire
        pool:
          id: {$$ref: ['pool', 'id']}
        connection:
          id: 0
    ignore:
      - connectionCreated
      - connectionPoolCreated
  - description: must be able to acquire multiple connections at the same time
    operations:
      - command: createPool
        returnTo: pool
      - command: start
        args: [ t1 ]
      - command: start
        args: [ t2 ]
      - command: start
        args: [ t3 ]
      - command: acquire
        thread: t1
        object: pool
        returnTo: conn1
      - command: acquire
        thread: t2
        object: pool
        returnTo: conn2
      - command: acquire
        thread: t3
        object: pool
        returnTo: conn3
      - command: waitFor
        args: [ t1 ]
      - command: waitFor
        args: [ t2 ]
      - command: waitFor
        args: [ t3 ]
    events:
      - type: connectionPoolAcquire
        pool:
          id: {$$ref: [ pool, id ]}
        connection:
          id: 0
      - type: connectionPoolAcquire
        pool:
          id: {$$ref: [ pool, id ]}
        connection:
          id: 1
      - type: connectionPoolAcquire
        pool:
          id: {$$ref: [ pool, id ]}
        connection:
          id: 2
    ignore:
      - connectionCreated
      - connectionPoolCreated
      - connectionPoolQueueEntered
  - description: must destroy and must not acquire a stale connection if found while iterating available connections
    operations:
      - command: createPool
        returnTo: pool
        args:
          - minPoolSize: 3
      - command: wait
        args: [ 20 ]
      - command: clear
        object: pool
      - command: acquire
        object: pool
        returnTo: conn
    events:
      - type: connectionPoolCreated
        pool:
          generation: 0
      - type: connectionCreated
        connection:
          id: 0
          generation: 0
      - type: connectionCreated
        connection:
          id: 1
          generation: 0
      - type: connectionCreated
        connection:
          id: 2
          generation: 0
      - type: connectionPoolCleared
        pool:
          generation: 1
      - type: connectionPoolQueueEntered

      # Note: we cannot deterministically assert which connections get destroyed in which order,
      # just that they will all be destroyed before connection acquisition.
      - type: connectionDestroyed
      - type: connectionDestroyed
      - type: connectionDestroyed
      - type: connectionCreated
        connection:
          id: 3
          generation: 1
      - type: connectionPoolAcquire
        connection:
          id: 3
          generation: 1
  - description: must throw error if acquire is called on a closed pool
    operations:
      - command: createPool
        returnTo: pool
      - command: acquire
        object: pool
        returnTo: conn1
      - command: release
        object: pool
        args: [ { $$ref: [ "conn1" ] } ]
      - command: close
        object: pool
      - command: acquire
        object: pool
        returnTo: conn2
    error:
      message: Attempted to acquire a connection from closed connection pool
      code: 20950
      id: { $$ref: [ "pool", "id" ] }
    events:
      - type: connectionPoolCreated
      - type: connectionPoolAcquire
      - type: connectionPoolRelease
      - type: connectionPoolClosed
    ignore:
      - connectionCreated
      - connectionDestroyed
      - connectionPoolQueueEntered
    

      