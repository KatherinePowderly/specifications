version: 1
style: unit
tests:
  - description: must issue Connections to threads in the order that the threads eneterd the queue
    operations:
      - name: createPool
        args:
          - maxPoolSize: 1
        returnTo: pool
      
        # Acquire sole connection in pool
      - name: acquire
        object: pool
        returnTo: conn
 
        # Create 4 threads, have them all queue up for connections
      - name: start
        args: [ "thread1" ]
      - name: acquire
        thread: thread1
        object: pool
        returnTo: conn
      - name: start
        args: [ "thread2" ]
      - name: acquire
        thread: thread2
        object: pool
        returnTo: conn
      - name: start
        args: [ "thread3" ]
      - name: acquire
        thread: thread3
        object: pool
        returnTo: conn
      - name: start
        args: [ "thread4" ]
      - name: acquire
        thread: thread4
        object: pool
        returnTo: conn
        # From main thread, keep releasing connection and then wait for appropriate thread
        # Test will timeout if threads are not enqueued in proper order
      - name: release
        object: pool
        args: [ { $$ref: [ "conn" ] } ]
      - name: waitFor
        args: [ "thread1" ]
      - name: release
        object: pool
        args: [ { $$ref: [ "conn" ] } ]
      - name: waitFor
        args: [ "thread2" ]
      - name: release
        object: pool
        args: [ { $$ref: [ "conn" ] } ]
      - name: waitFor
        args: [ "thread3" ]
      - name: release
        object: pool
        args: [ { $$ref: [ "conn" ] } ]
      - name: waitFor
        args: [ "thread4" ]
    events:
      - type: connectionPoolQueueEntered
      - type: connectionPoolAcquire
      - type: connectionPoolQueueEntered
      - type: connectionPoolQueueEntered
      - type: connectionPoolQueueEntered
      - type: connectionPoolQueueEntered
      - type: connectionPoolRelease
      - type: connectionPoolAcquire
      - type: connectionPoolRelease
      - type: connectionPoolAcquire
      - type: connectionPoolRelease
      - type: connectionPoolAcquire
      - type: connectionPoolRelease
      - type: connectionPoolAcquire
    ignore:
      - connectionCreated
      - connectionDestroyed
      - connectionPoolCreated
  - description: must not let more than waitQueueSize threads enter the queue
    operations:
      - name: createPool
        returnTo: pool
        args:
          - maxPoolSize: 1
            waitQueueSize: 1
      # Acquire sole possible connection
      - name: acquire
        object: pool
        returnTo: conn1
      # Start a thread, have it enter sole wait queue spot
      - name: start
        args: [ "thread1" ]
      - name: acquire
        thread: thread1
        object: pool
        returnTo: conn2
      - name: wait
        args: [ 20 ]
      # Start another thread, have it attempt to enter wait queue, find it full, error
      - name: start
        args: [ "thread2" ]
      - name: acquire
        thread: thread2
        object: pool
        returnTo: conn3
      - name: waitFor
        args: [ "thread2" ]
    error:
      message: Attempted to acquire a connection from connection pool while waitQueue was full
      code: 20951
      id: { $$ref: [ "pool", "id" ] }
    events:
      - type: connectionPoolQueueEntered
      - type: connectionPoolAcquire
      - type: connectionPoolQueueEntered
      - type: connectionPoolQueueFull
    ignore:
      - connectionCreated
      - connectionDestroyed
      - connectionPoolCreated
  - description: must aggressively timeout threads enqueued longer than waitQueueTimeoutMS
    operations:
      - name: createPool
        returnTo: pool
        args:
          - maxPoolSize: 1
            waitQueueTimeoutMS: 20
      # Acquire only possible connection
      - name: acquire
        object: pool
        returnTo: conn1
      # Start a thread, have it enter the wait queue
      - name: start
        args: [ "thread1" ]
      - name: acquire
        thread: thread1
        object: pool
        returnTo: conn2
      # Wait long enough for other thread to time out, then release connection
      - name: wait
        args: [ 40 ]
      - name: release
        object: pool
        args: [ { $$ref: [ "conn1" ] } ]
      # Rejoin thread1, should experience error
      - name: waitFor
        args: [ "thread1" ]
    error:
      message: Timed out while acquiring a connection from connection pool
      code: 20952
      id: { $$ref: [ "pool", "id" ] }
    events:
      - type: connectionPoolQueueEntered
      - type: connectionPoolAcquire
        pool:
          id: { $$ref: [ "pool", "id" ] }
        connection:
          id: { $$ref: [ "conn1", "id" ] }
      - type: connectionPoolQueueEntered
      - type: connectionPoolQueueTimeout
      - type: connectionPoolRelease
        pool:
          id: { $$ref: [ "pool", "id" ] }
        connection:
          id: { $$ref: [ "conn1", "id" ] }
    ignore:
      - connectionCreated
      - connectionDestroyed
      - connectionPoolCreated
    
      

  